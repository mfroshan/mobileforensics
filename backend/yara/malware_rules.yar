import "math"

rule RAT_Remote_Access
{
  meta:
    description = "Flags common RAT backdoor behavior"
  strings:
    $sock = /socket\(AF_INET,\s*SOCK_STREAM,\s*0\)/ nocase
    $cmd = "cmd.exe"
    $psh = "powershell"
  condition:
    any of ($cmd, $psh) or
    ($sock and (any of ($cmd, $psh)))
}

rule Ransomware_Locker
{
  meta:
    description = "Detects ransomware behavior (notes, encrypted files)"
  strings:
    $note1 = "READ_ME.txt"
    $note2 = "Decrypt.txt"
    $locked_ext = /\.locked$/ nocase
    $ext = /[^ ]{0,100}\.(enc|crypt|locked|encrypted)/ nocase
  condition:
    any of them
}

rule Downloader_Malware
{
  meta:
    description = "Detects downloaders using curl, wget or encoded URLs"
  strings:
    $cmd1 = "wget "
    $cmd2 = "curl "
    $b64url = /aHR0cDovL|aHR0cHM6Ly/            // base64 of http(s)://
    $dropper = /hxxp:\/\/[\w\-\.]+\/\S+/
  condition:
    any of them
}

rule Heuristic_File_Characteristics
{
  meta:
    description = "Flags files with suspicious structure, permissions, and entropy"
  strings:
    $s1 = "chmod 777"                            // Suspicious permission
    $s2 = /eval\(.{1,100}\)/                     // Obfuscated script execution
    $s3 = "This program cannot be run in DOS mode" // PE marker
    $obf = /"[A-Za-z0-9+\/]{150,300}={0,2}"/
  condition:
    2 of ($s1, $s2, $s3) or
    (1 of ($obf) and 1 of ($s1, $s2, $s3))

}


rule Suspicious_PDF_Malware
{
    meta:
        description = "Detects suspicious PDF files containing JavaScript or exploits"
        author = "ROSHAN"
        category = "PDF_Malware"
        date = "2025-08-07"

    strings:
        $pdf_header     = "%PDF-" ascii
        $js1            = "/JavaScript" ascii
        $js2            = "/JS" ascii
        $open_action    = "/OpenAction" ascii
        $eval_func      = "eval(" ascii
        $cve_20100188   = "CVE-2010-0188" ascii

    condition:
        $pdf_header at 0 and
        any of ($js1, $js2, $open_action) and
        any of ($eval_func, $cve_20100188)
}


rule Advanced_Android_Malware_Generic_Detection_v3
{
    meta:
        author       = "Roshan (rev)"
        category     = "Generic_Android_Malware"
        description  = "Generic Android malware detection tuned for APK scanning"
        last_updated = "2025-08-07"

    strings:
        /* Structural sanity â€“ must exist, never evidence */
        $zip_magic = { 50 4B 03 04 }
        $dex_magic = { 64 65 78 0A 30 33 35 } 

        /* Suspicious package names (wide + ascii) */
        $pkg_sysupd  = "com.android.system.update" wide nocase
        $pkg_playupd = "com.google.play.updater"   wide nocase
        $pkg_fakeav  = "com.fake.av"               wide nocase

        /* Suspicious commands (wide + ascii) */
        $cmd_chmod  = "chmod 777" wide nocase
        $cmd_su     = "su -c"     wide nocase
        $cmd_pm     = "pm install" wide nocase

        /* Encoded / obfuscated artefacts (base-64 MZ header) */
        $b64_mz  = "TVqQAAMAAAAEAAAA" ascii nocase   // base-64 of MZ header
        $cnc_url = "command.control"  wide nocase

    condition:
        /* 1. Must be an APK  */
        $zip_magic and $dex_magic and

        /* 2. At least one high-confidence indicator */
        (
            (any of ($pkg*) and any of ($cmd*)) or   // fake pkg + exec
            (any of ($cmd*) and $cnc_url) or         // exec + C2
            $b64_mz                                  // packed PE payload
        )
}

rule Android_RAT_Remote_Access_Advanced
{
  meta:
    description = "Detects advanced Android Remote Access Trojans (RATs) based on permissions, overlays, C2, and known RAT families"
    author = "Roshan Muttath Francis"
    last_modified = "2025-08-07"
    threat_type = "RAT"
    malware_families = "Anubis, Hydra, Medusa, Alien, Ermac, Octo, Cerberus, Sharkbot"
    confidence = "high"

  strings:
    // Abused permissions
    $perm_sms_recv   = "android.permission.RECEIVE_SMS"
    $perm_sms_send   = "android.permission.SEND_SMS"
    $perm_sms_read   = "android.permission.READ_SMS"
    $perm_contacts_r = "android.permission.READ_CONTACTS"
    $perm_contacts_w = "android.permission.WRITE_CONTACTS"
    $perm_internet   = "android.permission.INTERNET"
    $perm_wakelock   = "android.permission.WAKE_LOCK"
    $perm_alert_win  = "android.permission.SYSTEM_ALERT_WINDOW"
    $perm_calllog    = "android.permission.READ_CALL_LOG"
    $perm_audio      = "android.permission.RECORD_AUDIO"
    $perm_camera     = "android.permission.CAMERA"
    $perm_phone      = "android.permission.READ_PHONE_STATE"
    $perm_fg_service = "android.permission.FOREGROUND_SERVICE"
    $perm_usage      = "android.permission.PACKAGE_USAGE_STATS"
    $perm_admin      = "android.permission.BIND_DEVICE_ADMIN"

    // Shell / execution / privilege
    $exec1 = "Runtime.getRuntime().exec"
    $exec2 = "su -c"
    $exec3 = "sh -c"
    $exec4 = "ProcessBuilder"
    $exec5 = "executeShellCommand"
    $exec6 = "startService"
    $exec7 = "stopService"

    // C2 communication and networking
    $net_http      = /https?:\/\/[a-z0-9\-\.]+\.(com|net|org|info|biz|ru|cn|cc|xyz)/ nocase
    $net_b64_http  = /aHR0cDovL|aHR0cHM6Ly/ nocase
    $net_socket    = "Socket"
    $net_client    = "org.apache.http.client.HttpClient"
    $net_urlcon    = "java.net.URLConnection"
    $net_webview   = "android.webkit.WebView"
    $net_dns       = "java.net.InetAddress.getByName"

    // Overlay attack vectors
    $overlay_type      = "LayoutParams.TYPE_SYSTEM_ALERT"
    $overlay_create    = "createOverlayView"
    $overlay_flags     = "setFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE"
    $overlay_fullblock = "WindowManager.LayoutParams.FLAG_FULLSCREEN"
    $overlay_settype   = "setType(WindowManager.LayoutParams.TYPE_SYSTEM_ALERT"

    // Obfuscation indicators (Base64 blobs, eval usage)
    $obf_b64long   = /[A-Za-z0-9+\/]{200,}/
    $obf_eval      = /eval\(.\{1,120\}\)/

    // Known Android RAT families
    $fam_anubis    = "Anubis"
    $fam_cerberus  = "Cerberus"
    $fam_hydra     = "Hydra"
    $fam_sharkbot  = "Sharkbot"
    $fam_ermac     = "Ermac"
    $fam_medusa    = "Medusa"
    $fam_alien     = "Alien"
    $fam_octo      = "Octo"

    // Common C2 commands found in Android RATs
    $c2_inject     = "cmd=inject"
    $c2_sms        = "cmd=grab_sms"
    $c2_contacts   = "cmd=grab_contacts"
    $c2_location   = "cmd=grab_location"
    $c2_keylogger  = "cmd=start_keylogger"
    $c2_mic        = "cmd=record_mic"
    $c2_apps       = "cmd=list_apps"
    $c2_cam        = "cmd=capture_photo"

  condition:
    (
      // Minimum 5 abused permissions
      5 of (
        $perm_sms_recv, $perm_sms_send, $perm_sms_read,
        $perm_contacts_r, $perm_contacts_w, $perm_internet,
        $perm_wakelock, $perm_alert_win, $perm_calllog,
        $perm_audio, $perm_camera, $perm_phone,
        $perm_fg_service, $perm_usage, $perm_admin
      )
    ) and

    // At least 2 command execution or networking patterns
    2 of (
      $exec1, $exec2, $exec3, $exec4, $exec5, $exec6, $exec7,
      $net_http, $net_b64_http, $net_socket, $net_client,
      $net_urlcon, $net_webview, $net_dns
    ) and

    // At least one known RAT family name
    1 of (
      $fam_anubis, $fam_cerberus, $fam_hydra, $fam_sharkbot,
      $fam_ermac, $fam_medusa, $fam_alien, $fam_octo
    ) and

    // One C2 command observed
    1 of (
      $c2_inject, $c2_sms, $c2_contacts, $c2_location,
      $c2_keylogger, $c2_mic, $c2_apps, $c2_cam
    ) and

    // Either overlay techniques or obfuscation
    (
      1 of ($overlay_type, $overlay_create, $overlay_flags, $overlay_fullblock, $overlay_settype)
      or 1 of ($obf_b64long, $obf_eval)
    )
}

rule Android_Downloader_Malware_Advanced
{
  meta:
    description = "Detects Android downloader malware using commands, encoded URLs, payload names, intents, obfuscation, and Anubis banking Trojan indicators"
    author = "Roshan"
    last_modified = "2025-08-07"
    category = "Android_Malware"
    severity = "high"

  strings:
    // Downloader-related strings
    $cmd_wget          = "wget "
    $cmd_curl          = "curl "
    $cmd_exec          = "Runtime.getRuntime().exec"
    $cmd_httpclient    = "org.apache.http.client.HttpClient"
    $cmd_okhttp        = "okhttp3.OkHttpClient"
    $cmd_urlconnection = "java.net.URLConnection"
    $cmd_webview       = "android.webkit.WebView"
    $cmd_invokeweb     = "Invoke-WebRequest"
    $cmd_powershell    = "powershell -enc"

    $url_http          = /https?:\/\/[a-z0-9\-\.]+\.(com|net|ru|cn|info|biz|org|xyz)/ nocase
    $url_hxxp          = /hxxp:\/\/[a-z0-9\-\.]+\.\S+/ nocase
    $url_base64        = /aHR0cDovL|aHR0cHM6Ly/ nocase

    $payload1          = "payload.apk"
    $payload2          = "update.apk"
    $payload3          = "patch.apk"
    $payload4          = "installer.apk"

    $intent_download   = "android.intent.action.DOWNLOAD_COMPLETE"
    $install_referrer  = "com.android.vending.INSTALL_REFERRER"

    $js_script1        = "document.createElement('script')"
    $js_fetch          = "fetch("
    $js_eval           = /eval\s*\(.{1,50}\)/

    // Anubis-specific strings
    $c2_url1           = "api/anubis" nocase ascii
    $c2_url2           = "login.php" nocase ascii
    $c2_url3           = "banking" nocase ascii
    $c2_url4           = "token" nocase ascii

    $overlay1          = "createOverlayView" nocase ascii
    $overlay2          = "android.permission.SYSTEM_ALERT_WINDOW"
    $overlay3          = "android.permission.BIND_ACCESSIBILITY_SERVICE"

    $sms_perm          = "android.permission.RECEIVE_SMS"
    $sms_perm2         = "android.permission.SEND_SMS"

    $apk_name          = "anubis.apk" nocase ascii
    $dex_class         = "Lcom/anubis/" nocase ascii
    $config_str        = "config.json" nocase ascii

  condition:
    (
      3 of (
        $cmd_wget,
        $cmd_curl,
        $cmd_exec,
        $cmd_httpclient,
        $cmd_okhttp,
        $cmd_urlconnection,
        $cmd_webview,
        $cmd_invokeweb,
        $cmd_powershell,
        $url_http,
        $url_hxxp,
        $url_base64,
        $payload1,
        $payload2,
        $payload3,
        $payload4,
        $intent_download,
        $install_referrer,
        $js_script1,
        $js_fetch,
        $js_eval
      )
    )
    or
    (
      (any of ($c2_url*) or any of ($overlay*)) and
      (any of ($sms_perm*, $cmd_exec)) and
      (any of ($apk_name, $dex_class, $config_str)) and
      filesize < 5MB
    )
}

rule Suspicious_SQLite_DB_v2
{
    meta:
        description = "Detects SQLite DBs likely used by Android malware (credentials, high entropy, known names)"
        author      = "Roshan"
        category    = "Forensic_DB"
        date        = "2025-08-07"

    strings:
        /* SQLite header â€“ must start at byte 0 */
        $sqlite_magic = "SQLite format 3" ascii

        /* High-value table / column names */
        $cred_table  = "credentials"      nocase wide
        $pass_col    = "password"         nocase wide
        $token_col   = "token"            nocase wide
        $card_col    = "credit_card"      nocase wide
        $cookie_col  = "cookies"          nocase wide
        $key_col     = "encryption_key"   nocase wide
        $rat_table   = "commands"         nocase wide
        $bot_table   = "bot"              nocase wide

        /* Common malicious DB filenames */
        $db_name1    = "signal.db"        nocase wide
        $db_name2    = "whatsapp.db"      nocase wide
        $db_name3    = "facebook.db"      nocase wide
        $db_name4    = "telegram.db"      nocase wide
        $db_name5    = "instagram.db"     nocase wide

    condition:
        /* Header must be present */
        $sqlite_magic at 0 and
        (
            /* 1) High-entropy content (encrypted blobs, packed data) */
            math.entropy(0, filesize) > 7.5 or

            /* 2) Suspicious schema */
            any of ($cred_table, $pass_col, $token_col, $card_col,
                    $cookie_col, $key_col, $rat_table, $bot_table) or

            /* 3) Known messenger filenames (only flag if >2 MB â€“ chat DBs are usually large) */
            (any of ($db_name*) and filesize > 2 * 1024 * 1024)
        )
}


rule apk_malware_generic_v2
{
    meta:
        description = "Generic Android malware â€“ tuned for APK scanning"
        author      = "Roshan (rev)"
        last_update = "2025-08-07"
        tlp         = "white"

    strings:
        /* structural sanity (must exist, never evidence) */
        $zip_magic = { 50 4B 03 04 } 
        $dex_magic = { 64 65 78 0A 30 } 

        /* dangerous permissions inside manifest */
        $perm_admin   = "android.permission.BIND_DEVICE_ADMIN"
        $perm_sms     = "android.permission.SEND_SMS"
        $perm_install = "android.permission.INSTALL_PACKAGES"
        $perm_inject  = "android.permission.INJECT_EVENTS"
        $perm_readlog = "android.permission.READ_LOGS"

        /* obfuscation / packer fingerprints */
        $pack_secexe  = "libsecexe.so" nocase
        $pack_jiagu   = "libjiagu"     nocase
        $pack_qihoo   = "libjiagu_x86.so" nocase
        $pack_bangcle  = "libshella"   nocase

        /* dynamic loading / reflection */
        $dex_loader = "dalvik/system/DexClassLoader" nocase wide
        $reflect    = "java/lang/reflect/Method"     nocase wide
        $payload   = "PayloadDexClass"              nocase wide

        /* privilege escalation */
        $su_exec    = /su[\x00-\x20]*-c/ wide nocase
        $shell_exec = /exec[\x00-\x20]*\(/ wide nocase

        /* encoded URLs (base64) */
        $b64_http  = /aHR0cDovL[a-zA-Z0-9+\/=]{0,2}/ nocase ascii
        $b64_https = /aHR0cHM6Ly[a-zA-Z0-9+\/=]{0,2}/ nocase ascii

    condition:
        /* must be an APK */
        $zip_magic and $dex_magic and
        /* at least one behavioural / obfuscation indicator */
        (
            any of ($perm_*)      or
            any of ($pack_*)      or
            any of ($dex_loader, $reflect, $payload) or
            any of ($su_exec, $shell_exec) or
            any of ($b64_*)       or
            (math.entropy(0, filesize) >= 7.8)
        )
}

rule Mobile_RAT_RemoteAccess
{
    meta:
        description      = "Android Remote-Access Trojan â€“ improved accuracy"
        author           = "Roshan"
        malware_family   = "RAT"
        last_modified    = "2025-08-07"

    strings:
        /* C2 / networking */
        $c2_http  = /https?:\/\/[\w\.\-]+\/(gate|api|panel|command)/ nocase
        $c2_b64   = /aHR0cDovL|aHR0cHM6Ly/ nocase                    // http(s):// in b64
        $socket   = "java.net.Socket" wide nocase

        /* execution / privilege */
        $exec_su      = "su -c" wide nocase
        $exec_sh      = "Runtime.getRuntime().exec" wide nocase
        $exec_pb      = "ProcessBuilder" wide nocase

        /* persistence / service */
        $service_fg   = "startForeground" wide nocase
        $boot_rcv    = "android.intent.action.BOOT_COMPLETED" wide nocase

    condition:
        /* need at least TWO indicators OR high entropy + one indicator */
        (
            2 of ($c2_http, $c2_b64, $socket, $exec_su, $exec_sh, $exec_pb, $service_fg, $boot_rcv)
        ) or
        (
            math.entropy(0, filesize) >= 7.6 and
            1 of ($c2_http, $c2_b64, $socket, $exec_su, $exec_sh)
        )
}

